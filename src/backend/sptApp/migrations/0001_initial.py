# Generated by Django 2.2.7 on 2020-04-16 04:53

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=250, null=True)),
                ('last_name', models.CharField(blank=True, max_length=250, null=True)),
                ('email', models.EmailField(max_length=250, unique=True)),
                ('join_date', models.DateTimeField(auto_now=True)),
                ('id_token', models.CharField(blank=True, max_length=5000, null=True)),
                ('is_professor', models.BooleanField(default=False)),
                ('username', models.CharField(blank=True, max_length=150, null=True)),
                ('password', models.CharField(blank=True, max_length=128, null=True, verbose_name='password')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Assignment', max_length=250)),
                ('weight', models.IntegerField(default=5)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('name', models.CharField(max_length=250, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('course_code', models.CharField(max_length=250)),
                ('subject_code', models.CharField(max_length=250)),
                ('professor', models.ForeignKey(blank=True, default='0', on_delete=django.db.models.deletion.CASCADE, related_name='professor', to=settings.AUTH_USER_MODEL)),
                ('teaching_assistants', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ExternalQuizStatic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quizName', models.CharField(default='Quiz Default', max_length=250)),
                ('quizScore', models.IntegerField(default=0)),
                ('question1', models.CharField(default='Question1', max_length=250)),
                ('question1answer1', models.CharField(default='Question1 Answer1', max_length=250)),
                ('question1answer2', models.CharField(default='Question1 Answer2', max_length=250)),
                ('question1answer3', models.CharField(default='Question1 Answer3', max_length=250)),
                ('question1answer4', models.CharField(default='Question1 Answer4', max_length=250)),
                ('correctIndex1', models.IntegerField(default=1)),
                ('isCorrectAnswer1', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='ExternalSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('base_url', models.TextField(unique=True, validators=[django.core.validators.URLValidator()])),
            ],
        ),
        migrations.CreateModel(
            name='ExternalSitesList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('website_name', models.CharField(default='Site 1', max_length=250)),
                ('website_nickname', models.CharField(default='Site 1', max_length=250)),
                ('is_website_used', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ExternalSiteToCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_ending', models.CharField(max_length=200)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sptApp.Course')),
                ('external_site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sptApp.ExternalSite')),
            ],
            options={
                'unique_together': {('external_site', 'url_ending')},
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pool', models.CharField(default='{"parsons": 0, "multiple_choice": 0, "select_all": 0, "free_response": 0}', max_length=2048)),
                ('practice_mode', models.BooleanField(default=False)),
                ('allow_submissions', models.BooleanField(default=True)),
                ('next_open_date', models.DateTimeField(default=datetime.datetime.now)),
                ('next_close_date', models.DateTimeField(default=datetime.datetime.now)),
                ('assignment', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='quiz_assignment', to='sptApp.Assignment')),
            ],
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.IntegerField(choices=[(0, 'multiple_choice'), (1, 'free_response'), (2, 'all_that_apply'), (3, 'parsons')])),
                ('answered_correct_count', models.IntegerField(default=0)),
                ('answered_total_count', models.IntegerField(default=0)),
                ('question_parameters', models.CharField(default='{"question": "Which is correct?", "choices": ["a", "b", "c", "d"], "answer": 2}', max_length=2048)),
                ('quiz', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='question_quiz', to='sptApp.Quiz')),
            ],
        ),
        migrations.CreateModel(
            name='StudentToAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment', to='sptApp.Assignment')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('ancestor_weight', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('locked', models.BooleanField(default=False)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='sptApp.Course')),
            ],
        ),
        migrations.CreateModel(
            name='TopicToTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('ancestor_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ancestor_node', to='sptApp.Topic')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edges', to='sptApp.Course')),
                ('topic_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_node', to='sptApp.Topic')),
            ],
        ),
        migrations.CreateModel(
            name='TopicToCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sptApp.Category')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sptApp.Topic')),
            ],
        ),
        migrations.CreateModel(
            name='StudentToTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competency', models.IntegerField(choices=[(0, 'Not Competent'), (1, 'Some Competency'), (2, 'Competent')], default=0)),
                ('grade', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nodes', to='sptApp.Course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sptApp.Topic')),
            ],
        ),
        migrations.CreateModel(
            name='StudentToQuizQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('quiz_question', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='student_quizquestion', to='sptApp.QuizQuestion')),
                ('student', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentToQuiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('completed_quiz', models.BooleanField(default=False)),
                ('quiz', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='student_quiz', to='sptApp.Quiz')),
                ('student', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('student_to_assignment', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='quiz_assignment', to='sptApp.StudentToAssignment')),
            ],
        ),
        migrations.CreateModel(
            name='StudentToCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.CharField(blank=True, max_length=250, null=True)),
                ('grade', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='sptApp.Course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(max_length=250)),
                ('nickname', models.CharField(blank=True, max_length=250, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Resources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(max_length=2000)),
                ('name', models.CharField(blank=True, max_length=2000, null=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sptApp.Topic')),
            ],
        ),
        migrations.CreateModel(
            name='GradeThreshold',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('a_plus_mastery', models.IntegerField(default=0)),
                ('a_plus_competency', models.IntegerField(default=0)),
                ('a_mastery', models.IntegerField(default=0)),
                ('a_competency', models.IntegerField(default=0)),
                ('a_minus_mastery', models.IntegerField(default=0)),
                ('a_minus_competency', models.IntegerField(default=0)),
                ('b_plus_mastery', models.IntegerField(default=0)),
                ('b_plus_competency', models.IntegerField(default=0)),
                ('b_mastery', models.IntegerField(default=0)),
                ('b_competency', models.IntegerField(default=0)),
                ('b_minus_mastery', models.IntegerField(default=0)),
                ('b_minus_competency', models.IntegerField(default=0)),
                ('c_plus_mastery', models.IntegerField(default=0)),
                ('c_plus_competency', models.IntegerField(default=0)),
                ('c_mastery', models.IntegerField(default=0)),
                ('c_competency', models.IntegerField(default=0)),
                ('c_minus_mastery', models.IntegerField(default=0)),
                ('c_minus_competency', models.IntegerField(default=0)),
                ('d_plus_mastery', models.IntegerField(default=0)),
                ('d_plus_competency', models.IntegerField(default=0)),
                ('d_mastery', models.IntegerField(default=0)),
                ('d_competency', models.IntegerField(default=0)),
                ('d_minus_mastery', models.IntegerField(default=0)),
                ('d_minus_competency', models.IntegerField(default=0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sptApp.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('value', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('topic_to_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='sptApp.TopicToCategory')),
            ],
        ),
        migrations.CreateModel(
            name='ExternalSiteToGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(blank=True, max_length=100, null=True)),
                ('external_site_to_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sptApp.ExternalSiteToCourse')),
                ('grade', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sptApp.Grade')),
            ],
        ),
        migrations.CreateModel(
            name='CompetencyThreshold',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competency_threshold', models.IntegerField(default=75)),
                ('mastery_threshold', models.IntegerField(default=90)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sptApp.Course')),
            ],
        ),
        migrations.AddField(
            model_name='assignment',
            name='topic',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='topic_assignment', to='sptApp.Topic'),
        ),
    ]
